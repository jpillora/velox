(()=>{var v=(s,t)=>()=>(t||s((t={exports:{}}).exports,t),t.exports);var rt=v(st=>{(function(s){"use strict";var t=s.setTimeout,e=s.clearTimeout,i=function(){};function n(r,f,h,l,p){this._internal=new o(r,f,h,l,p)}n.prototype.open=function(r,f){this._internal.open(r,f)},n.prototype.cancel=function(){this._internal.cancel()};function o(r,f,h,l,p){this.onStartCallback=f,this.onProgressCallback=h,this.onFinishCallback=l,this.thisArg=p,this.xhr=r,this.state=0,this.charOffset=0,this.offset=0,this.url="",this.withCredentials=!1,this.timeout=0}o.prototype.onStart=function(){if(this.state===1){this.state=2;var r=0,f="",h=void 0;if("contentType"in this.xhr)r=200,f="OK",h=this.xhr.contentType;else try{r=this.xhr.status,f=this.xhr.statusText,h=this.xhr.getResponseHeader("Content-Type")}catch(l){r=0,f="",h=void 0}h==null&&(h=""),this.onStartCallback.call(this.thisArg,r,f,h)}},o.prototype.onProgress=function(){if(this.onStart(),this.state===2||this.state===3){this.state=3;var r="";try{r=this.xhr.responseText}catch(S){}for(var f=this.charOffset,h=r.length,l=this.offset;l<h;l+=1){var p=r.charCodeAt(l);(p===10||p===13)&&(this.charOffset=l+1)}this.offset=h;var y=r.slice(f,this.charOffset);this.onProgressCallback.call(this.thisArg,y)}},o.prototype.onFinish=function(){this.onProgress(),this.state===3&&(this.state=4,this.timeout!==0&&(e(this.timeout),this.timeout=0),this.onFinishCallback.call(this.thisArg))},o.prototype.onReadyStateChange=function(){this.xhr!=null&&(this.xhr.readyState===4?this.xhr.status===0?this.onFinish():this.onFinish():this.xhr.readyState===3?this.onProgress():this.xhr.readyState)},o.prototype.onTimeout2=function(){this.timeout=0;var r=/^data\:([^,]*?)(base64)?,([\S]*)$/.exec(this.url),f=r[1],h=r[2]==="base64"?s.atob(r[3]):decodeURIComponent(r[3]);this.state===1&&(this.state=2,this.onStartCallback.call(this.thisArg,200,"OK",f)),(this.state===2||this.state===3)&&(this.state=3,this.onProgressCallback.call(this.thisArg,h)),this.state===3&&(this.state=4,this.onFinishCallback.call(this.thisArg))},o.prototype.onTimeout1=function(){this.timeout=0,this.open(this.url,this.withCredentials)},o.prototype.onTimeout0=function(){var r=this;this.timeout=t(function(){r.onTimeout0()},500),this.xhr.readyState===3&&this.onProgress()},o.prototype.handleEvent=function(r){r.type==="load"?this.onFinish():r.type==="error"?this.onFinish():r.type==="abort"?this.onFinish():r.type==="progress"?this.onProgress():r.type==="readystatechange"&&this.onReadyStateChange()},o.prototype.open=function(r,f){this.cancel(),this.url=r,this.withCredentials=f,this.state=1,this.charOffset=0,this.offset=0;var h=this,l=/^data\:([^,]*?)(?:;base64)?,[\S]*$/.exec(r);if(l!=null){this.timeout=t(function(){h.onTimeout2()},0);return}if((!("ontimeout"in this.xhr)||"sendAsBinary"in this.xhr||"mozAnon"in this.xhr)&&s.document!=null&&s.document.readyState!=null&&s.document.readyState!=="complete"){this.timeout=t(function(){h.onTimeout1()},4);return}this.xhr.onload=function(p){h.handleEvent({type:"load"})},this.xhr.onerror=function(){h.handleEvent({type:"error"})},this.xhr.onabort=function(){h.handleEvent({type:"abort"})},this.xhr.onprogress=function(){h.handleEvent({type:"progress"})},this.xhr.onreadystatechange=function(){h.handleEvent({type:"readystatechange"})},this.xhr.open("GET",r,!0),this.xhr.withCredentials=f,this.xhr.responseType="text","setRequestHeader"in this.xhr&&this.xhr.setRequestHeader("Accept","text/event-stream");try{this.xhr.send(void 0)}catch(p){throw p}"readyState"in this.xhr&&s.opera!=null&&(this.timeout=t(function(){h.onTimeout0()},0))},o.prototype.cancel=function(){this.state!==0&&this.state!==4&&(this.state=4,this.xhr.onload=i,this.xhr.onerror=i,this.xhr.onabort=i,this.xhr.onprogress=i,this.xhr.onreadystatechange=i,this.xhr.abort(),this.timeout!==0&&(e(this.timeout),this.timeout=0),this.onFinishCallback.call(this.thisArg)),this.state=0};function u(){this._data={}}u.prototype.get=function(r){return this._data[r+"~"]},u.prototype.set=function(r,f){this._data[r+"~"]=f},u.prototype.delete=function(r){delete this._data[r+"~"]};function c(){this._listeners=new u}function d(r){t(function(){throw r},0)}c.prototype.dispatchEvent=function(r){r.target=this;var f=r.type.toString(),h=this._listeners,l=h.get(f);if(l!=null)for(var p=l.length,y=void 0,S=0;S<p;S+=1){y=l[S];try{typeof y.handleEvent=="function"?y.handleEvent(r):y.call(this,r)}catch(P){d(P)}}},c.prototype.addEventListener=function(r,f){r=r.toString();var h=this._listeners,l=h.get(r);l==null&&(l=[],h.set(r,l));for(var p=l.length;p>=0;p-=1)if(l[p]===f)return;l.push(f)},c.prototype.removeEventListener=function(r,f){r=r.toString();var h=this._listeners,l=h.get(r);if(l!=null){for(var p=l.length,y=[],S=0;S<p;S+=1)l[S]!==f&&y.push(l[S]);y.length===0?h.delete(r):h.set(r,y)}};function w(r){this.type=r,this.target=void 0}function A(r,f){w.call(this,r),this.data=f.data,this.lastEventId=f.lastEventId}A.prototype=w.prototype;var a=s.XMLHttpRequest,b=s.XDomainRequest,_=a!=null&&new a().withCredentials!=null,tt=_||a!=null&&b==null?a:b,W=-1,x=0,O=1,I=2,H=3,T=4,X=5,et=6,Bt=7,Ft=/^text\/event\-stream;?(\s*charset\=utf\-8)?$/i,it=1e3,L=18e6,k=function(r,f){var h=r;return h!==h&&(h=f),h<it?it:h>L?L:h},U=function(r,f,h){try{typeof f=="function"&&f.call(r,h)}catch(l){d(l)}};function j(r,f){c.call(this),this.onopen=void 0,this.onmessage=void 0,this.onerror=void 0,this.url="",this.readyState=x,this.withCredentials=!1,this._internal=new R(this,r,f)}function R(r,f,h){this.url=f.toString(),this.readyState=x,this.withCredentials=_&&h!=null&&!!h.withCredentials,this.es=r,this.initialRetry=k(1e3,0),this.heartbeatTimeout=k(45e3,0),this.lastEventId="",this.retry=this.initialRetry,this.wasActivity=!1;var l=h!=null&&h.Transport!=null?h.Transport:tt,p=new l;this.transport=new n(p,this.onStart,this.onProgress,this.onFinish,this),this.timeout=0,this.currentState=W,this.dataBuffer=[],this.lastEventIdBuffer="",this.eventTypeBuffer="",this.state=T,this.fieldStart=0,this.valueStart=0,this.es.url=this.url,this.es.readyState=this.readyState,this.es.withCredentials=this.withCredentials,this.onTimeout()}R.prototype.onStart=function(r,f,h){if(this.currentState===x){if(h==null&&(h=""),r===200&&Ft.test(h)){this.currentState=O,this.wasActivity=!0,this.retry=this.initialRetry,this.readyState=O,this.es.readyState=O;var l=new w("open");this.es.dispatchEvent(l),U(this.es,this.es.onopen,l)}else if(r!==0){var p="";r!==200?p="EventSource's response has a status "+r+" "+f.replace(/\s+/g," ")+" that is not 200. Aborting the connection.":p="EventSource's response has a Content-Type specifying an unsupported type: "+h.replace(/\s+/g," ")+". Aborting the connection.",d(new Error(p)),this.close();var l=new w("error");this.es.dispatchEvent(l),U(this.es,this.es.onerror,l)}}},R.prototype.onProgress=function(r){if(this.currentState===O){var f=r.length;f!==0&&(this.wasActivity=!0);for(var h=0;h<f;h+=1){var l=r.charCodeAt(h);if(this.state===H&&l===10)this.state=T;else if(this.state===H&&(this.state=T),l===13||l===10){if(this.state!==T){this.state===X&&(this.valueStart=h+1);var p=r.slice(this.fieldStart,this.valueStart-1),y=r.slice(this.valueStart+(this.valueStart<h&&r.charCodeAt(this.valueStart)===32?1:0),h);if(p==="data")this.dataBuffer.push(y);else if(p==="id")this.lastEventIdBuffer=y;else if(p==="event")this.eventTypeBuffer=y;else if(p==="retry")this.initialRetry=k(Number(y),this.initialRetry),this.retry=this.initialRetry;else if(p==="heartbeatTimeout"&&(this.heartbeatTimeout=k(Number(y),this.heartbeatTimeout),this.timeout!==0)){e(this.timeout);var S=this;this.timeout=t(function(){S.onTimeout()},this.heartbeatTimeout)}}if(this.state===T){if(this.dataBuffer.length!==0){this.lastEventId=this.lastEventIdBuffer,this.eventTypeBuffer===""&&(this.eventTypeBuffer="message");var P=new A(this.eventTypeBuffer,{data:this.dataBuffer.join("\n"),lastEventId:this.lastEventIdBuffer});if(this.es.dispatchEvent(P),this.eventTypeBuffer==="message"&&U(this.es,this.es.onmessage,P),this.currentState===I)return}this.dataBuffer.length=0,this.eventTypeBuffer=""}this.state=l===13?H:T}else this.state===T&&(this.fieldStart=h,this.state=X),this.state===X?l===58&&(this.valueStart=h+1,this.state=et):this.state===et&&(this.state=Bt)}}},R.prototype.onFinish=function(){if(this.currentState===O||this.currentState===x){this.currentState=W,this.timeout!==0&&(e(this.timeout),this.timeout=0),this.retry>this.initialRetry*16&&(this.retry=this.initialRetry*16),this.retry>L&&(this.retry=L);var r=this;this.timeout=t(function(){r.onTimeout()},this.retry),this.retry=this.retry*2+1,this.readyState=x,this.es.readyState=x;var f=new w("error");this.es.dispatchEvent(f),U(this.es,this.es.onerror,f)}},R.prototype.onTimeout=function(){if(this.timeout=0,this.currentState!==W){if(!this.wasActivity)d(new Error("No activity within "+this.heartbeatTimeout+" milliseconds. Reconnecting.")),this.transport.cancel();else{this.wasActivity=!1;var r=this;this.timeout=t(function(){r.onTimeout()},this.heartbeatTimeout)}return}this.wasActivity=!1;var r=this;this.timeout=t(function(){r.onTimeout()},this.heartbeatTimeout),this.currentState=x,this.dataBuffer.length=0,this.eventTypeBuffer="",this.lastEventIdBuffer=this.lastEventId,this.fieldStart=0,this.valueStart=0,this.state=T;var f=this.url.slice(0,5);f!=="data:"&&f!=="blob:"?f=this.url+((this.url.indexOf("?",0)===-1?"?":"&")+"lastEventId="+encodeURIComponent(this.lastEventId)+"&r="+(Math.random()+1).toString().slice(2)):f=this.url;try{this.transport.open(f,this.withCredentials)}catch(h){throw this.close(),h}},R.prototype.close=function(){this.currentState=I,this.transport.cancel(),this.timeout!==0&&(e(this.timeout),this.timeout=0),this.readyState=I,this.es.readyState=I};function $(){this.CONNECTING=x,this.OPEN=O,this.CLOSED=I}$.prototype=c.prototype,j.prototype=new $,j.prototype.close=function(){this._internal.close()},$.call(j),_&&(j.prototype.withCredentials=void 0);var Dt=function(){return s.EventSource!=null&&"withCredentials"in s.EventSource.prototype};tt!=null&&(s.EventSource==null||_&&!Dt())&&(s.NativeEventSource=s.EventSource,s.EventSource=j)})(typeof window<"u"?window:st)});var K=v((de,nt)=>{"use strict";nt.exports.serialize=function(s){return s&&typeof s.toJSON=="function"?s.toJSON():s}});var at=v((ye,ht)=>{"use strict";var ot=K().serialize;ht.exports=function s(t,e){if(e=ot(e),e===null||typeof e!="object"||Array.isArray(e))return e;t=ot(t),(t===null||typeof t!="object"||Array.isArray(t))&&(t={});for(var i=Object.keys(e),n=0;n<i.length;n++){var o=i[n];if(o==="__proto__"||o==="constructor"||o==="prototype")return t;e[o]===null?t.hasOwnProperty(o)&&delete t[o]:t[o]=s(t[o],e[o])}return t}});var ut=v((ve,ft)=>{"use strict";ft.exports=function s(t,e){if(t===e)return!0;if(t&&e&&typeof t=="object"&&typeof e=="object"){if(t.constructor!==e.constructor)return!1;var i,n,o;if(Array.isArray(t)){if(i=t.length,i!=e.length)return!1;for(n=i;n--!==0;)if(!s(t[n],e[n]))return!1;return!0}if(t.constructor===RegExp)return t.source===e.source&&t.flags===e.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===e.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===e.toString();if(o=Object.keys(t),i=o.length,i!==Object.keys(e).length)return!1;for(n=i;n--!==0;)if(!Object.prototype.hasOwnProperty.call(e,o[n]))return!1;for(n=i;n--!==0;){var u=o[n];if(!s(t[u],e[u]))return!1}return!0}return t!==t&&e!==e}});var lt=v((me,ct)=>{"use strict";var Mt=ut(),B=K().serialize;function zt(s,t){if(s.length!==t.length)return!1;for(var e=0;e<s.length;e++)if(!Mt(t[e],s[e]))return!1;return!0}ct.exports=function s(t,e){if(t=B(t),e=B(e),t===null||e===null||typeof t!="object"||typeof e!="object"||Array.isArray(t)!==Array.isArray(e))return e;if(Array.isArray(t))return zt(t,e)?void 0:e;var i={},n=Object.keys(t),o=Object.keys(e),u,c,d={};for(c=0;c<o.length;c++)u=o[c],n.indexOf(u)===-1&&(d[u]=!0,i[u]=B(e[u]));var w={};for(c=0;c<n.length;c++)if(u=n[c],o.indexOf(u)===-1)w[u]=!0,i[u]=null;else if(t[u]!==null&&typeof t[u]=="object"){var A=s(t[u],e[u]);A!==void 0&&(i[u]=A)}else t[u]!==e[u]&&(i[u]=B(e[u]));return Object.keys(i).length>0?i:void 0}});var dt=v((we,pt)=>{"use strict";pt.exports=function s(t,e){if(t===null||e===null||typeof t!="object"||typeof e!="object"||Array.isArray(t)!==Array.isArray(e))return e;var i=JSON.parse(JSON.stringify(t));return Object.keys(e).forEach(function(n){t[n]!==void 0?i[n]=s(t[n],e[n]):i[n]=e[n]}),i}});var yt=v((Se,F)=>{"use strict";F.exports.apply=at();F.exports.generate=lt();F.exports.merge=dt()});var mt=v((ge,vt)=>{vt.exports=function s(t,e){if(!t||typeof t!="object"||!e||typeof e!="object")return e;var i;if(t instanceof Array&&e instanceof Array)for(;t.length>e.length;)t.pop();else for(i in t)i[0]!=="$"&&!(i in e)&&delete t[i];for(i in e)t[i]=s(t[i],e[i]);return t}});var St=v((Ee,wt)=>{"use strict";wt.exports=function(t,e){if(e=e.split(":")[0],t=+t,!t)return!1;switch(e){case"http":case"ws":return t!==80;case"https":case"wss":return t!==443;case"ftp":return t!==21;case"gopher":return t!==70;case"file":return!1}return t!==0}});var Ct=v(G=>{"use strict";var Wt=Object.prototype.hasOwnProperty,Ht;function gt(s){try{return decodeURIComponent(s.replace(/\+/g," "))}catch(t){return null}}function Et(s){try{return encodeURIComponent(s)}catch(t){return null}}function Xt(s){for(var t=/([^=?#&]+)=?([^&]*)/g,e={},i;i=t.exec(s);){var n=gt(i[1]),o=gt(i[2]);n===null||o===null||n in e||(e[n]=o)}return e}function $t(s,t){t=t||"";var e=[],i,n;typeof t!="string"&&(t="?");for(n in s)if(Wt.call(s,n)){if(i=s[n],!i&&(i===null||i===Ht||isNaN(i))&&(i=""),n=Et(n),i=Et(i),n===null||i===null)continue;e.push(n+"="+i)}return e.length?t+e.join("&"):""}G.stringify=$t;G.parse=Xt});var jt=v((Ae,It)=>{"use strict";var xt=St(),D=Ct(),Kt=/^[\x00-\x20\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]+/,Tt=/[\n\r\t]/g,Gt=/^[A-Za-z][A-Za-z0-9+-.]*:\/\//,bt=/:\d+$/,Jt=/^([a-z][a-z0-9.+-]*:)?(\/\/)?([\\/]+)?([\S\s]*)/i,Vt=/^[a-zA-Z]:/;function V(s){return(s||"").toString().replace(Kt,"")}var J=[["#","hash"],["?","query"],function(t,e){return E(e.protocol)?t.replace(/\\/g,"/"):t},["/","pathname"],["@","auth",1],[NaN,"host",void 0,1,1],[/:(\d*)$/,"port",void 0,1],[NaN,"hostname",void 0,1,1]],At={hash:1,query:1};function Ot(s){var t;typeof window<"u"?t=window:typeof global<"u"?t=global:typeof self<"u"?t=self:t={};var e=t.location||{};s=s||e;var i={},n=typeof s,o;if(s.protocol==="blob:")i=new C(unescape(s.pathname),{});else if(n==="string"){i=new C(s,{});for(o in At)delete i[o]}else if(n==="object"){for(o in s)o in At||(i[o]=s[o]);i.slashes===void 0&&(i.slashes=Gt.test(s.href))}return i}function E(s){return s==="file:"||s==="ftp:"||s==="http:"||s==="https:"||s==="ws:"||s==="wss:"}function Rt(s,t){s=V(s),s=s.replace(Tt,""),t=t||{};var e=Jt.exec(s),i=e[1]?e[1].toLowerCase():"",n=!!e[2],o=!!e[3],u=0,c;return n?o?(c=e[2]+e[3]+e[4],u=e[2].length+e[3].length):(c=e[2]+e[4],u=e[2].length):o?(c=e[3]+e[4],u=e[3].length):c=e[4],i==="file:"?u>=2&&(c=c.slice(2)):E(i)?c=e[4]:i?n&&(c=c.slice(2)):u>=2&&E(t.protocol)&&(c=e[4]),{protocol:i,slashes:n||E(i),slashesCount:u,rest:c}}function Zt(s,t){if(s==="")return t;for(var e=(t||"/").split("/").slice(0,-1).concat(s.split("/")),i=e.length,n=e[i-1],o=!1,u=0;i--;)e[i]==="."?e.splice(i,1):e[i]===".."?(e.splice(i,1),u++):u&&(i===0&&(o=!0),e.splice(i,1),u--);return o&&e.unshift(""),(n==="."||n==="..")&&e.push(""),e.join("/")}function C(s,t,e){if(s=V(s),s=s.replace(Tt,""),!(this instanceof C))return new C(s,t,e);var i,n,o,u,c,d,w=J.slice(),A=typeof t,a=this,b=0;for(A!=="object"&&A!=="string"&&(e=t,t=null),e&&typeof e!="function"&&(e=D.parse),t=Ot(t),n=Rt(s||"",t),i=!n.protocol&&!n.slashes,a.slashes=n.slashes||i&&t.slashes,a.protocol=n.protocol||t.protocol||"",s=n.rest,(n.protocol==="file:"&&(n.slashesCount!==2||Vt.test(s))||!n.slashes&&(n.protocol||n.slashesCount<2||!E(a.protocol)))&&(w[3]=[/(.*)/,"pathname"]);b<w.length;b++){if(u=w[b],typeof u=="function"){s=u(s,a);continue}o=u[0],d=u[1],o!==o?a[d]=s:typeof o=="string"?(c=o==="@"?s.lastIndexOf(o):s.indexOf(o),~c&&(typeof u[2]=="number"?(a[d]=s.slice(0,c),s=s.slice(c+u[2])):(a[d]=s.slice(c),s=s.slice(0,c)))):(c=o.exec(s))&&(a[d]=c[1],s=s.slice(0,c.index)),a[d]=a[d]||i&&u[3]&&t[d]||"",u[4]&&(a[d]=a[d].toLowerCase())}e&&(a.query=e(a.query)),i&&t.slashes&&a.pathname.charAt(0)!=="/"&&(a.pathname!==""||t.pathname!=="")&&(a.pathname=Zt(a.pathname,t.pathname)),a.pathname.charAt(0)!=="/"&&E(a.protocol)&&(a.pathname="/"+a.pathname),xt(a.port,a.protocol)||(a.host=a.hostname,a.port=""),a.username=a.password="",a.auth&&(c=a.auth.indexOf(":"),~c?(a.username=a.auth.slice(0,c),a.username=encodeURIComponent(decodeURIComponent(a.username)),a.password=a.auth.slice(c+1),a.password=encodeURIComponent(decodeURIComponent(a.password))):a.username=encodeURIComponent(decodeURIComponent(a.auth)),a.auth=a.password?a.username+":"+a.password:a.username),a.origin=a.protocol!=="file:"&&E(a.protocol)&&a.host?a.protocol+"//"+a.host:"null",a.href=a.toString()}function Yt(s,t,e){var i=this;switch(s){case"query":typeof t=="string"&&t.length&&(t=(e||D.parse)(t)),i[s]=t;break;case"port":i[s]=t,xt(t,i.protocol)?t&&(i.host=i.hostname+":"+t):(i.host=i.hostname,i[s]="");break;case"hostname":i[s]=t,i.port&&(t+=":"+i.port),i.host=t;break;case"host":i[s]=t,bt.test(t)?(t=t.split(":"),i.port=t.pop(),i.hostname=t.join(":")):(i.hostname=t,i.port="");break;case"protocol":i.protocol=t.toLowerCase(),i.slashes=!e;break;case"pathname":case"hash":if(t){var n=s==="pathname"?"/":"#";i[s]=t.charAt(0)!==n?n+t:t}else i[s]=t;break;case"username":case"password":i[s]=encodeURIComponent(t);break;case"auth":var o=t.indexOf(":");~o?(i.username=t.slice(0,o),i.username=encodeURIComponent(decodeURIComponent(i.username)),i.password=t.slice(o+1),i.password=encodeURIComponent(decodeURIComponent(i.password))):i.username=encodeURIComponent(decodeURIComponent(t))}for(var u=0;u<J.length;u++){var c=J[u];c[4]&&(i[c[1]]=i[c[1]].toLowerCase())}return i.auth=i.password?i.username+":"+i.password:i.username,i.origin=i.protocol!=="file:"&&E(i.protocol)&&i.host?i.protocol+"//"+i.host:"null",i.href=i.toString(),i}function Qt(s){(!s||typeof s!="function")&&(s=D.stringify);var t,e=this,i=e.host,n=e.protocol;n&&n.charAt(n.length-1)!==":"&&(n+=":");var o=n+(e.protocol&&e.slashes||E(e.protocol)?"//":"");return e.username?(o+=e.username,e.password&&(o+=":"+e.password),o+="@"):e.password?(o+=":"+e.password,o+="@"):e.protocol!=="file:"&&E(e.protocol)&&!i&&e.pathname!=="/"&&(o+="@"),(i[i.length-1]===":"||bt.test(e.hostname)&&!e.port)&&(i+=":"),o+=i+e.pathname,t=typeof e.query=="object"?s(e.query):e.query,t&&(o+=t.charAt(0)!=="?"?"?"+t:t),e.hash&&(o+=e.hash),o}C.prototype={set:Yt,toString:Qt};C.extractProtocol=Rt;C.location=Ot;C.trimLeft=V;C.qs=D;It.exports=C});var Nt=v((xe,qt)=>{qt.exports=Z;function Z(s){s=s||{},this.ms=s.min||100,this.max=s.max||1e4,this.factor=s.factor||2,this.jitter=s.jitter>0&&s.jitter<=1?s.jitter:0,this.attempts=0}Z.prototype.duration=function(){var s=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var t=Math.random(),e=Math.floor(t*this.jitter*s);s=(Math.floor(t*10)&1)==0?s-e:s+e}return Math.min(s,this.max)|0};Z.prototype.reset=function(){this.attempts=0}});var kt=v((be,Lt)=>{var te=yt(),ee=mt(),ie=jt(),se=Nt(),re="v2",ne=45*1e3,oe=25*1e3,he=5*1e3,ae=30*1e3,Te=10*1e3,fe=typeof window=="object",ue=typeof global=="object",Y=Symbol("WS"),z=Symbol("SSE"),g=fe?window:ue?global:null;if(!g)throw"where am i...";var _t=["message","error","open","close"],q=[],M=class{constructor(t,e,i,n){switch(t){case Y:if(!g.WebSocket)throw"This client does not support WebSockets";this.ws=!0;break;case z:this.sse=!0;break;default:throw"Type must be velox.WS or velox.SSE"}if(!i||typeof i!="object")throw"Invalid object";this.obj=i,this.opts=n||{},this.backoff=new se(this.opts.backoff||{min:100,max:2e4}),this.opts.retry===void 0&&(this.opts.retry=!0),e||(e="/velox"),this.url=e,this.id="",this.version=0,this.onpatch=function(o){},this.onupdate=function(){},this.onerror=function(){},this.onconnect=function(){},this.ondisconnect=function(){},this.onchange=function(){},this.connected=!1,this.connect()}connect(){q.indexOf(this)===-1&&q.push(this),"Promise"in g&&(this.waited=null,this.waiter=new Promise(t=>{this.waited=t})),this.retrying=!0,this.retry()}retry(){if(clearTimeout(this.retry.t),this.conn&&this.cleanup(),!this.retrying)return;this.delay||(this.delay=100);let t=this.url;g.location&&!/^(ws|http)s?:/.test(t)&&(t=g.location.protocol+"//"+g.location.host+t),this.ws&&(t=t.replace(/^http/,"ws"));let e=ie(t,!0);this.version&&(e.query.v=this.version),this.id&&(e.query.id=this.id),this.opts.username&&(e.username=this.opts.username),this.opts.password&&(e.password=this.opts.password),t=e.toString(),this.ws?this.conn=new g.WebSocket(t):this.conn=new g.EventSource(t,{withCredentials:!0});let i=this;_t.forEach(function(n){i.conn["on"+n]=i["conn"+n].bind(i)}),this.sleepCheck.last=null,this.sleepCheck()}disconnect(){let t=q.indexOf(this);t>=0&&q.splice(t,1),this.retrying=!1,this.cleanup(),this.waiter&&this.waited()}cleanup(){if(clearTimeout(this.pingout.t),!this.conn)return;let t=this.conn;this.conn=null,_t.forEach(function(e){t["on"+e]=null}),t&&t.readyState!==t.CLOSED&&t.close(),this.statusCheck()}send(t){let e=this.conn;if(e&&e instanceof g.WebSocket&&e.readyState===e.OPEN)return e.send(t)}pingin(){clearTimeout(this.pingin.t),this.pingin.t=setTimeout(this.retry.bind(this),ne)}pingout(){this.send("ping"),clearTimeout(this.pingout.t),this.pingout.t=setTimeout(this.pingout.bind(this),oe)}sleepCheck(){let t=this.sleepCheck;clearInterval(t.t);let e=Date.now(),i=t.last&&e-t.last>ae;t.last=e,t.t=setTimeout(this.sleepCheck.bind(this),he),i&&this.retry()}statusCheck(t){let e=!!this.connected,i=!!(this.conn&&this.conn.readyState===this.conn.OPEN);e!==i&&(this.connected=i,this.onchange(this.connected),this.connected?this.onconnect():this.ondisconnect())}connmessage(t){let e;try{e=JSON.parse(t.data)}catch(i){this.onerror(i);return}if(e.ping){this.pingin();return}if(e.id&&(this.id=e.id),!e.body||!this.obj){this.onerror("null objects");return}if(e.delta)try{te.apply(this.obj,e.body)}catch(i){this.onerror(i)}else ee(this.obj,e.body);typeof this.obj.$apply=="function"&&this.obj.$apply(),this.onupdate(this.obj),this.version=e.version,this.backoff.reset()}connopen(){this.statusCheck(),this.pingin(),this.pingout()}connclose(){if(this.statusCheck(),this.opts.retry){let t=this.backoff.duration();this.retrying&&m.online&&(this.retry.t=setTimeout(this.connect.bind(this),t))}else this.disconnect()}connerror(t){this.conn&&this.conn instanceof g.EventSource?(this.conn.close(),this.connclose()):(this.statusCheck(),this.onerror(t))}wait(){return this.waiter}},m=function(s,t,e){return m.DEFAULT===z||!g.WebSocket?m.sse(s,t,e):m.ws(s,t,e)};m.WS=Y;m.ws=function(s,t,e){return new M(Y,s,t,e)};m.SSE=m.DEFAULT=z;m.sse=function(s,t,e){return new M(z,s,t,e)};m.proto=re;m.connections=q;m.online=!0;Lt.exports=m});var ce=v((Oe,Pt)=>{rt();var N=kt(),Q=N.connections;function Ut(s){if(N.online=navigator.onLine,N.online)for(var t=0;t<Q.length;t++)Q[t].retrying&&Q[t].retry()}window.addEventListener("online",Ut);window.addEventListener("offline",Ut);window.velox=N;Pt.exports=N});ce();})();
/*! Bundled license information:

event-source-polyfill/eventsource.js:
  (** @license
   * eventsource.js
   * Available under MIT License (MIT)
   * https://github.com/Yaffle/EventSource/
   *)
*/
//# sourceMappingURL=data:application/json;base64,
